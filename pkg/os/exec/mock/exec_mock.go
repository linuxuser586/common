// Code generated by MockGen. DO NOT EDIT.
// Source: exec.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
	syscall "syscall"
)

// MockCmd is a mock of Cmd interface
type MockCmd struct {
	ctrl     *gomock.Controller
	recorder *MockCmdMockRecorder
}

// MockCmdMockRecorder is the mock recorder for MockCmd
type MockCmdMockRecorder struct {
	mock *MockCmd
}

// NewMockCmd creates a new mock instance
func NewMockCmd(ctrl *gomock.Controller) *MockCmd {
	mock := &MockCmd{ctrl: ctrl}
	mock.recorder = &MockCmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCmd) EXPECT() *MockCmdMockRecorder {
	return m.recorder
}

// CombinedOutput mocks base method
func (m *MockCmd) CombinedOutput() ([]byte, error) {
	ret := m.ctrl.Call(m, "CombinedOutput")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CombinedOutput indicates an expected call of CombinedOutput
func (mr *MockCmdMockRecorder) CombinedOutput() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CombinedOutput", reflect.TypeOf((*MockCmd)(nil).CombinedOutput))
}

// Credential mocks base method
func (m *MockCmd) Credential(arg0 *syscall.Credential) {
	m.ctrl.Call(m, "Credential", arg0)
}

// Credential indicates an expected call of Credential
func (mr *MockCmdMockRecorder) Credential(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credential", reflect.TypeOf((*MockCmd)(nil).Credential), arg0)
}

// Output mocks base method
func (m *MockCmd) Output() ([]byte, error) {
	ret := m.ctrl.Call(m, "Output")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Output indicates an expected call of Output
func (mr *MockCmdMockRecorder) Output() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockCmd)(nil).Output))
}

// Run mocks base method
func (m *MockCmd) Run() error {
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockCmdMockRecorder) Run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCmd)(nil).Run))
}

// Start mocks base method
func (m *MockCmd) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockCmdMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCmd)(nil).Start))
}

// StderrPipe mocks base method
func (m *MockCmd) StderrPipe() (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "StderrPipe")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StderrPipe indicates an expected call of StderrPipe
func (mr *MockCmdMockRecorder) StderrPipe() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StderrPipe", reflect.TypeOf((*MockCmd)(nil).StderrPipe))
}

// StdinPipe mocks base method
func (m *MockCmd) StdinPipe() (io.WriteCloser, error) {
	ret := m.ctrl.Call(m, "StdinPipe")
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StdinPipe indicates an expected call of StdinPipe
func (mr *MockCmdMockRecorder) StdinPipe() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdinPipe", reflect.TypeOf((*MockCmd)(nil).StdinPipe))
}

// StdoutPipe mocks base method
func (m *MockCmd) StdoutPipe() (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "StdoutPipe")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StdoutPipe indicates an expected call of StdoutPipe
func (mr *MockCmdMockRecorder) StdoutPipe() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdoutPipe", reflect.TypeOf((*MockCmd)(nil).StdoutPipe))
}

// Wait mocks base method
func (m *MockCmd) Wait() error {
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockCmdMockRecorder) Wait() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockCmd)(nil).Wait))
}
